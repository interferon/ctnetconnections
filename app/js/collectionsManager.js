// Generated by CoffeeScript 1.7.1
(function() {
  var accessParameters, collections, dataProcFn, deleteBuilding, deleteUser, getCableTableParamsForLogin, itemsSaver, processSavedItems, rowsnumber, saveUsdAdjust, warehouseTableFns;

  dataProcFn = require('./dataProcessingFunctions');

  warehouseTableFns = require('./warehouseTableFns');

  dataProcFn = require('./dataProcessingFunctions');

  rowsnumber = 10;

  itemsSaver = require('./itemsSaver');

  accessParameters = require('./accessParameters');

  processSavedItems = function(params, res, db) {
    return collections[params.collection](params, res, db);
  };

  collections = {
    buildings: function(params, res, db) {
      return db.getAll('buildings', function(buildings) {
        if (params.building_id) {
          return dataProcFn.asyncForEach(['streetnames', 'connectors', 'equipment'], db.getAll, function(data) {
            var buildingsWithReplacedEquipmentIds, buildingsinfo, buildingswithRepStreets, connectors;
            buildingswithRepStreets = dataProcFn.replaceStreetIdWithStreetNames(buildings, data.streetnames);
            buildingsWithReplacedEquipmentIds = dataProcFn.replaceBuildingBoxesIDsWithObjects(buildingswithRepStreets, data.equipment);
            connectors = dataProcFn.replaceBuildingsIdWithBuildings(data.connectors, buildingsWithReplacedEquipmentIds, ['parent', 'out']);
            buildingsinfo = dataProcFn.prepareBuildingsInfo({
              'buildings': buildingsWithReplacedEquipmentIds,
              'connectors': connectors
            }, params.building_id);
            return dataProcFn.runResponse(res, buildingsinfo, 'text/plain');
          });
        } else {
          return db.getAll('streetnames', function(streetnames) {
            buildings = dataProcFn.replaceStreetIdWithStreetNames(buildings, streetnames);
            return dataProcFn.runResponse(res, buildings, 'text/plain');
          });
        }
      });
    },
    connectors: function(params, res, db) {
      return db.getAll('connectors', function(items) {
        return dataProcFn.asyncForEach(['buildings', 'streetnames'], db.getAll, function(data) {
          var buildings, connectors;
          buildings = dataProcFn.replaceStreetIdWithStreetNames(data.buildings, data.streetnames);
          connectors = dataProcFn.replaceBuildingsIdWithBuildings(items, buildings, ['parent', 'out']);
          return dataProcFn.runResponse(res, connectors, 'text/plain');
        });
      });
    },
    logs: function(params, res, db) {
      return db.getAll('logs', function(connectors) {
        var tableData;
        if (connectors.length > rowsnumber) {
          connectors = connectors.slice(connectors.length - rowsnumber, connectors.length);
        }
        tableData = dataProcFn.createLogsTableData(connectors);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    },
    copperincome: function(params, res, db) {
      return db.getAll('copperincome', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            tableData = dataProcFn.createCopperIncomeBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createCopperIncomeTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            return getCableTableParamsForLogin(db, params.login, 'copper', function(tableparams) {
              tableData = dataProcFn.createCopperIncomeTableData(items, tableparams);
              return dataProcFn.runResponse(res, tableData, 'text/plain');
            });
        }
      });
    },
    copperuse: function(params, res, db) {
      return db.getAll('copperuse', function(items) {
        var tableData;
        if (items.length > rowsnumber) {
          items = items.slice(items.length - rowsnumber, items.length);
        }
        tableData = dataProcFn.createCopperUseTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    },
    opticalincome: function(params, res, db) {
      return db.getAll('opticalincome', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            tableData = dataProcFn.createOpticalIncomeBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createOpticalIncomeTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            return db.getAll('opticalplans', function(plans) {
              var filtered, i, plan, totalplan, _i, _j, _len, _len1;
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                i = items[_i];
                filtered = plans.filter(function(e) {
                  return i._id.toString() === e.income_id;
                });
                totalplan = 0;
                for (_j = 0, _len1 = filtered.length; _j < _len1; _j++) {
                  plan = filtered[_j];
                  totalplan += +plan.length;
                }
                i['totalplan'] = totalplan;
                i['left'] = i.length - totalplan;
              }
              return getCableTableParamsForLogin(db, params.login, 'optics', function(tableparams) {
                tableData = dataProcFn.createOpticalIncomeTableData(items, tableparams);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              });
            });
        }
      });
    },
    opticallogs: function(params, res, db) {
      return db.getAll('opticallogs', function(items) {
        var tableData;
        if (items.length > rowsnumber) {
          items = items.slice(items.length - rowsnumber, items.length);
        }
        tableData = dataProcFn.createOpticalLogsTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    },
    opticaluse: function(params, res, db) {
      return db.getAll('opticaluse', function(items) {
        var tableData;
        if (items.length > rowsnumber) {
          items = items.slice(items.length - rowsnumber, items.length);
        }
        tableData = dataProcFn.createOpticalUseTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    },
    opticalplans: function(params, res, db) {
      return db.getAll('opticalplans', function(items) {
        var tableData;
        if (params.type === 'onlyitems') {
          return dataProcFn.runResponse(res, items, 'text/plain');
        } else {
          tableData = dataProcFn.createOpticalPlansTableData(items, params.income_id);
          return dataProcFn.runResponse(res, tableData, 'text/plain');
        }
      });
    },
    boxstore: function(params, res, db) {
      return db.getAll('boxstore', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createBoxBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createBoxesStoreTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            tableData = dataProcFn.createBoxesStoreTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
        }
      });
    },
    patchpanelstore: function(params, res, db) {
      return db.getAll('patchpanelstore', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createpatchpanelBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createpatchpanelesStoreTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            tableData = dataProcFn.createpatchpanelesStoreTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
        }
      });
    },
    patchcordstore: function(params, res, db) {
      return db.getAll('patchcordstore', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createpatchcordBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createpatchcordesStoreTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            tableData = dataProcFn.createpatchcordesStoreTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
        }
      });
    },
    pigtailsstore: function(params, res, db) {
      return db.getAll('pigtailsstore', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createpigtailsBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createpigtailsesStoreTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            tableData = dataProcFn.createpigtailsesStoreTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
        }
      });
    },
    socketsstore: function(params, res, db) {
      return db.getAll('socketsstore', function(items) {
        var tableData, tabledata;
        switch (params.type) {
          case 'bills':
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createsocketsBillsData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case 'warehouse':
            tabledata = warehouseTableFns.createsocketsesStoreTableData(items);
            return dataProcFn.runResponse(res, tabledata, 'text/plain');
          case 'incometable':
            tableData = dataProcFn.createsocketsesStoreTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
        }
      });
    },
    equipment: function(params, res, db) {
      return db.getAll('equipment', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    boxesnames: function(params, res, db) {
      return db.getAll('boxesnames', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    streetnames: function(params, res, db) {
      return db.getAll('streetnames', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    commutatornames: function(params, res, db) {
      return db.getAll('commutatornames', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    upsnames: function(params, res, db) {
      return db.getAll('upsnames', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    odfnames: function(params, res, db) {
      return db.getAll('odfnames', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    users: function(params, res, db) {
      return db.getAll('users', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    workers: function(params, res, db) {
      return db.getAll('workers', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    workerscash: function(params, res, db) {
      return db.getAll('workerscash', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    warehouselogs: function(params, res, db) {
      return db.getAll('warehouselogs', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    },
    sessions: function(params, res, db) {
      return db.getAll('sessions', function(items) {
        return dataProcFn.runResponse(res, items, 'text/plain');
      });
    }
  };

  getCableTableParamsForLogin = function(db, user, cabletype, cb) {
    return db.getByParam('accesslevel', {
      user: user
    }, function(data) {
      var accessLevel;
      if (data[0]) {
        accessLevel = data[0].level;
      } else {
        accessLevel = 'standart';
      }
      return cb(accessParameters[cabletype][accessLevel]);
    });
  };

  deleteUser = function(login, res, db) {
    return db.getByParam('users', {
      login: {
        $regex: login,
        $options: 'i'
      }
    }, function(items) {
      if (items.length === 0) {
        return dataProcFn.runResponse(res, {
          "result": "У базі немає такого логіна!"
        }, 'text/plain');
      } else {
        return db.removeByParam('users', {
          login: login
        }, function(result) {
          if (result) {
            res.setHeader('Content-Type', 'text/plain');
            return res.end(JSON.stringify({
              "result": "Користувача видалено!"
            }));
          } else {
            return res.end(JSON.stringify({
              "result": "Такого користувача немає в базі!"
            }));
          }
        });
      }
    });
  };

  deleteBuilding = function(id, res, db) {
    return db.remove('buildings', id.toString(), function(result) {
      return dataProcFn.runResponse(res, result, 'text/plain');
    });
  };

  saveUsdAdjust = function(adjust, res, db) {
    return db.removeByParam('other', {
      "adjust": {
        $exists: true
      }
    }, function() {
      return db.save('other', {
        adjust: adjust
      }, function(result) {
        return dataProcFn.runResponse(res, result, 'text/plain');
      });
    });
  };

  module.exports.processSavedItems = processSavedItems;

  module.exports.deleteUser = deleteUser;

  module.exports.deleteBuilding = deleteBuilding;

  module.exports.saveUsdAdjust = saveUsdAdjust;

}).call(this);
