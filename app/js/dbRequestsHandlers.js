// Generated by CoffeeScript 1.6.2
(function() {
  var dataProcFn, rowsnumber, warehouseTableFns;

  dataProcFn = require('./dataProcessingFunctions');

  warehouseTableFns = require('./warehouseTableFns');

  rowsnumber = 10;

  module.exports.start = function(app, db) {
    var getCopperCableParamsForLogin, getOpticalCableParamsForLogin;

    app.post('/saveitem', function(req, res) {
      var user;

      user = req.session.login;
      return dataProcFn.createItem(req, db, function(item) {
        return db.save(req.body.collection, item, function(result) {
          return dataProcFn.runResponse(res, result, 'text/plain');
        });
      });
    });
    app.get('/getsaveditems', function(req, res) {
      var query;

      query = req.query;
      return db.getAll(query.collection, function(items) {
        var collections, tableData, tabledata;

        switch (query.collection) {
          case "buildings":
            if (query.building_id) {
              collections = ['streetnames', 'connectors', 'equipment'];
              return dataProcFn.asyncForEach(collections, db.getAll, function(data) {
                var buildingsWithReplacedEquipmentIds, buildingsinfo, buildingswithRepStreets, connectors;

                buildingswithRepStreets = dataProcFn.replaceStreetIdWithStreetNames(items, data.streetnames);
                buildingsWithReplacedEquipmentIds = dataProcFn.replaceBuildingBoxesIDsWithObjects(buildingswithRepStreets, data.equipment);
                connectors = dataProcFn.replaceBuildingsIdWithBuildings(data.connectors, buildingsWithReplacedEquipmentIds, ['parent', 'out']);
                buildingsinfo = dataProcFn.prepareBuildingsInfo({
                  'buildings': buildingsWithReplacedEquipmentIds,
                  'connectors': connectors
                }, query.building_id);
                return dataProcFn.runResponse(res, buildingsinfo, 'text/plain');
              });
            } else {
              return db.getAll('streetnames', function(streetnames) {
                var buildings;

                buildings = dataProcFn.replaceStreetIdWithStreetNames(items, streetnames);
                return dataProcFn.runResponse(res, buildings, 'text/plain');
              });
            }
            break;
          case "connectors":
            collections = ['buildings', 'streetnames'];
            return dataProcFn.asyncForEach(collections, db.getAll, function(data) {
              var buildings, connectors;

              buildings = dataProcFn.replaceStreetIdWithStreetNames(data.buildings, data.streetnames);
              connectors = dataProcFn.replaceBuildingsIdWithBuildings(items, buildings, ['parent', 'out']);
              return dataProcFn.runResponse(res, connectors, 'text/plain');
            });
          case "logs":
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createLogsTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case "copperincome":
            switch (query.type) {
              case 'bills':
                tableData = dataProcFn.createCopperIncomeBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createCopperIncomeTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                tableData = dataProcFn.createCopperIncomeTableData(items, getCopperCableParamsForLogin(req.session.login));
                return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          case "copperuse":
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createCopperUseTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case "opticalincome":
            switch (query.type) {
              case 'bills':
                tableData = dataProcFn.createOpticalIncomeBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createOpticalIncomeTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                return db.getAll('opticalplans', function(plans) {
                  var filtered, i, plan, totalplan, _i, _j, _len, _len1;

                  for (_i = 0, _len = items.length; _i < _len; _i++) {
                    i = items[_i];
                    filtered = plans.filter(function(e) {
                      return i._id.toString() === e.income_id;
                    });
                    totalplan = 0;
                    for (_j = 0, _len1 = filtered.length; _j < _len1; _j++) {
                      plan = filtered[_j];
                      totalplan += +plan.length;
                    }
                    i['totalplan'] = totalplan;
                    i['left'] = i.length - totalplan;
                  }
                  tableData = dataProcFn.createOpticalIncomeTableData(items, getOpticalCableParamsForLogin(req.session.login));
                  return dataProcFn.runResponse(res, tableData, 'text/plain');
                });
            }
            break;
          case "opticallogs":
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createOpticalLogsTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case "opticaluse":
            if (items.length > rowsnumber) {
              items = items.slice(items.length - rowsnumber, items.length);
            }
            tableData = dataProcFn.createOpticalUseTableData(items);
            return dataProcFn.runResponse(res, tableData, 'text/plain');
          case "opticalplans":
            if (query.type === 'onlyitems') {
              return dataProcFn.runResponse(res, items, 'text/plain');
            } else {
              tableData = dataProcFn.createOpticalPlansTableData(items, query.income_id);
              return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          case "boxstore":
            switch (query.type) {
              case 'bills':
                if (items.length > rowsnumber) {
                  items = items.slice(items.length - rowsnumber, items.length);
                }
                tableData = dataProcFn.createBoxBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createBoxesStoreTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                tableData = dataProcFn.createBoxesStoreTableData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          case "patchpanelstore":
            switch (query.type) {
              case 'bills':
                if (items.length > rowsnumber) {
                  items = items.slice(items.length - rowsnumber, items.length);
                }
                tableData = dataProcFn.createpatchpanelBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createpatchpanelesStoreTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                tableData = dataProcFn.createpatchpanelesStoreTableData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          case "patchcordstore":
            switch (query.type) {
              case 'bills':
                if (items.length > rowsnumber) {
                  items = items.slice(items.length - rowsnumber, items.length);
                }
                tableData = dataProcFn.createpatchcordBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createpatchcordesStoreTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                tableData = dataProcFn.createpatchcordesStoreTableData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          case "pigtailsstore":
            switch (query.type) {
              case 'bills':
                if (items.length > rowsnumber) {
                  items = items.slice(items.length - rowsnumber, items.length);
                }
                tableData = dataProcFn.createpigtailsBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createpigtailsesStoreTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                tableData = dataProcFn.createpigtailsesStoreTableData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          case "socketsstore":
            switch (query.type) {
              case 'bills':
                if (items.length > rowsnumber) {
                  items = items.slice(items.length - rowsnumber, items.length);
                }
                tableData = dataProcFn.createsocketsBillsData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
              case 'warehouse':
                tabledata = warehouseTableFns.createsocketsesStoreTableData(items);
                return dataProcFn.runResponse(res, tabledata, 'text/plain');
              case 'incometable':
                tableData = dataProcFn.createsocketsesStoreTableData(items);
                return dataProcFn.runResponse(res, tableData, 'text/plain');
            }
            break;
          default:
            return dataProcFn.runResponse(res, items, 'text/plain');
        }
      });
    });
    app.get("/getcopperuse", function(req, res) {
      var end, query, start;

      query = req.query;
      start = new Date(query.syear, query.smonth, query.sday, 23, 59).toISOString();
      end = new Date(query.eyear, query.emonth, query.eday, 23, 59).toISOString();
      return db.getByParam('copperuse', {
        "date": {
          "$gte": start,
          "$lte": end
        }
      }, function(items) {
        var tableData;

        tableData = dataProcFn.createCopperUseTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    });
    app.get("/getcopperbills", function(req, res) {
      var end, query, start;

      query = req.query;
      start = new Date(query.syear, query.smonth, query.sday, 23, 59).toISOString();
      end = new Date(query.eyear, query.emonth, query.eday, 23, 59).toISOString();
      return db.getByParam('copperincome', {
        "date": {
          "$gte": start,
          "$lte": end
        }
      }, function(items) {
        var tableData;

        tableData = dataProcFn.createCopperIncomeBillsData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    });
    app.get("/getopticaluse", function(req, res) {
      var end, query, start;

      query = req.query;
      start = new Date(query.syear, query.smonth, query.sday, 23, 59).toISOString();
      end = new Date(query.eyear, query.emonth, query.eday, 23, 59).toISOString();
      return db.getByParam('opticaluse', {
        "date": {
          "$gte": start,
          "$lte": end
        }
      }, function(items) {
        var tableData;

        tableData = dataProcFn.createOpticalUseTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    });
    app.get("/getopticallogs", function(req, res) {
      var end, query, start;

      query = req.query;
      start = new Date(query.syear, query.smonth, query.sday, 23, 59).toISOString();
      end = new Date(query.eyear, query.emonth, query.eday, 23, 59).toISOString();
      return db.getByParam('opticallogs', {
        "date": {
          "$gte": start,
          "$lte": end
        }
      }, function(items) {
        var tableData;

        tableData = dataProcFn.createOpticalLogsTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    });
    app.get("/getopticalbills", function(req, res) {
      var end, query, start;

      query = req.query;
      start = new Date(query.syear, query.smonth, query.sday, 23, 59).toISOString();
      end = new Date(query.eyear, query.emonth, query.eday, 23, 59).toISOString();
      return db.getByParam('opticalincome', {
        "date": {
          "$gte": start,
          "$lte": end
        }
      }, function(items) {
        var tableData;

        tableData = dataProcFn.createOpticalIncomeBillsData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    });
    app.get("/getworkercash", function(req, res) {
      var query;

      query = req.query;
      return db.getAll('opticaluse', function(items) {});
    });
    app.get("/getchangelogs", function(req, res) {
      var end, query, start;

      query = req.query;
      start = new Date(query.syear, query.smonth, query.sday, 23, 59).toISOString();
      end = new Date(query.eyear, query.emonth, query.eday, 23, 59).toISOString();
      return db.getByParam('logs', {
        "date": {
          "$gte": start,
          "$lte": end
        }
      }, function(items) {
        var tableData;

        tableData = dataProcFn.createLogsTableData(items);
        return dataProcFn.runResponse(res, tableData, 'text/plain');
      });
    });
    app.post('/deleteitem', function(req, res) {
      return db.remove(req.body.collection, req.body._id.toString(), function(result) {
        return dataProcFn.runResponse(res, result, 'text/plain');
      });
    });
    app.post('/update', function(req, res) {
      return db.update(req.body.collection, req.body._id.toString(), req.body.data, req.body.update_type, function(result) {
        return dataProcFn.runResponse(res, result, 'text/plain');
      });
    });
    getCopperCableParamsForLogin = function(user) {
      switch (user) {
        case "chovgan":
          return {
            fields: ["type", "pairs", "rope", "manufacturer", "serial", "length", "price", "user"],
            headers: ['№', 'Тип', 'К-сть пар', 'Трос', 'Виробник', 'Серійний №', "Довжина(м)", "Ціна(грн)", "Додав", 'Використати']
          };
        default:
          return {
            fields: ["type", "pairs", "rope", "manufacturer", "serial", "length", "user"],
            headers: ['№', 'Тип', 'К-сть пар', 'Трос', 'Виробник', 'Серійний №', "Довжина(м)", "Додав", 'Використати']
          };
      }
    };
    return getOpticalCableParamsForLogin = function(user, plans) {
      switch (user) {
        case 'chovgan':
          return {
            fields: ["fibers", "rope", "manufacturer", "drum", "length", "totalplan", "left", "price", "user"],
            headers: ['№', 'Волокон', 'Трос', 'Виробник', 'Барабан', 'Довжина(м)', 'Заплановано(м)', 'Вільно(м)', 'Ціна (грн)', 'Додав', 'Запланувати', 'Переглянути план']
          };
        default:
          return {
            fields: ["fibers", "rope", "manufacturer", "drum", "length", "totalplan", "left", "user"],
            headers: ['№', 'Волокон', 'Трос', 'Виробник', 'Барабан', 'Довжина(м)', 'Заплановано(м)', 'Вільно(м)', 'Додав', 'Запланувати', 'Переглянути план']
          };
      }
    };
  };

}).call(this);
