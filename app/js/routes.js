// Generated by CoffeeScript 1.7.1
(function() {
  var accessChecker, collectionsManager, dataProcFn, path;

  dataProcFn = require('./dataProcessingFunctions');

  path = require('path');

  accessChecker = require('./accessChecker');

  collectionsManager = require('./collectionsManager');

  module.exports.start = function(app, db) {
    var checkAuth, saveCopperUse, saveOpticalUse, saveOpticalUseLog, saveWorkerCash;
    checkAuth = function(req, res, next) {
      if (!req.session.login || !req.session.pass) {
        return res.redirect('/login');
      } else {
        return next();
      }
    };
    app.get('/', checkAuth, function(req, res) {
      return res.sendfile(path.join(__dirname, '/../view/index.html'));
    });
    app.get('/admin', checkAuth, accessChecker.checkAccess, function(req, res) {
      return res.sendfile(path.join(__dirname, '/../view/admin.html'));
    });
    app.get('/notallowed', function(req, res) {
      return res.send('Access denied!');
    });
    app.get('/logout', function(req, res) {
      req.session.destroy();
      return db.removeByParam('sessions', {
        "_id": req.sessionID.toString()
      }, function(result) {
        return res.redirect('/login');
      });
    });
    app.get('/warehouse', checkAuth, function(req, res) {
      return res.sendfile(path.join(__dirname, '/../view/warehouse.html'));
    });
    app.post('/login', function(req, res) {
      var login, pass;
      login = req.body.login;
      pass = req.body.pass;
      return db.getByParam('users', {
        login: login
      }, function(user) {
        if (user[0]) {
          if (user[0].pass === pass) {
            req.session.login = login;
            req.session.pass = pass;
            return res.redirect('/');
          } else {
            return res.sendfile(path.join(__dirname, '/../view/loginwrong.html'));
          }
        } else {
          return res.sendfile(path.join(__dirname, '/../view/loginwrong.html'));
        }
      });
    });
    app.get('/login', function(req, res) {
      return res.sendfile(path.join(__dirname, '/../view/login.html'));
    });
    app.get('/calc', checkAuth, function(req, res) {
      return res.sendfile(path.join(__dirname, '/../view/calc.html'));
    });
    app.post('/deleteuser', checkAuth, accessChecker.checkAccess, function(req, res) {
      return collectionsManager.deleteUser(req.body.login, res, db);
    });
    app.post('/deletebuilding', checkAuth, accessChecker.checkAccess, function(req, res) {
      return collectionsManager.deleteBuilding(req.body.id, res, db);
    });
    app.post('/deleteboxequipment', function(req, res) {
      return db.getById('equipment', req.body.box_id, function(box) {
        var id, ids, _i, _len;
        ids = [];
        ids = ids.concat(box[0].commutators).concat(box[0].upses).concat(box[0].odf);
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          db.remove('equipment', id, function() {});
        }
        res.setHeader('Content-Type', 'text/plain');
        return res.end(JSON.stringify({
          "result": "Related equipment deleted"
        }));
      });
    });
    app.post('/saveusdadjust', checkAuth, accessChecker.checkAccess, function(req, res) {
      return collectionsManager.saveUsdAdjust(req.body.adjust, res, db);
    });
    app.post('/savecopperincome', accessChecker.checkAccess, function(req, res) {
      var item, user;
      user = req.session.login;
      item = req.body;
      item.user = user;
      return db.save('copperincome', item, function(result) {
        res.setHeader('Content-Type', 'text/plain');
        return res.end(JSON.stringify(result));
      });
    });
    app.post('/savecopperuse', accessChecker.checkAccess, function(req, res) {
      var item, length, user;
      length = 0;
      user = req.session.login;
      item = req.body.data;
      item.user = user;
      return db.getById('copperincome', req.body.income_id, function(income) {
        length = +income[0].length - +item.length;
        if (length >= 0) {
          return db.update("copperincome", req.body.income_id, {
            "length": length
          }, 'set', function() {
            return saveCopperUse(item, res);
          });
        } else {
          length = length * -1;
          res.setHeader('Content-Type', 'text/plain');
          return res.end(JSON.stringify({
            result: "Допустима довжина кабелю для даного зразка " + income[0].length + " метрів"
          }));
        }
      });
    });
    saveCopperUse = function(item, res) {
      return db.save('copperuse', item, function(result) {
        res.setHeader('Content-Type', 'text/plain');
        return res.end(JSON.stringify(result));
      });
    };
    app.post('/saveopticalincome', accessChecker.checkAccess, function(req, res) {
      var item, user;
      user = req.session.login;
      item = req.body;
      item.user = user;
      return db.save('opticalincome', item, function(result) {
        res.setHeader('Content-Type', 'text/plain');
        return res.end(JSON.stringify(result));
      });
    });
    app.post('/savecableplan', accessChecker.checkAccess, function(req, res) {
      var item, user;
      user = req.session.login;
      item = req.body;
      item.user = user;
      return db.getById('opticalincome', item.income_id, function(income) {
        income = income[0];
        return db.getByParam('opticalplans', {
          income_id: income._id.toString()
        }, function(plans) {
          var plan, totalplanned, unplanned, _i, _len;
          totalplanned = 0;
          for (_i = 0, _len = plans.length; _i < _len; _i++) {
            plan = plans[_i];
            totalplanned += +plan.length;
          }
          unplanned = +income.length - totalplanned;
          if (unplanned >= item.length) {
            return db.save('opticalplans', item, function(result) {
              db.save('opticallogs', {
                "action": 'Запланував використання кабелю',
                "length": item.length,
                "date": new Date().toISOString(),
                "intensions": item.intensions,
                "cable": income.manufacturer + ", волокон : " + income.fibers,
                "user": req.session.login
              }, function() {});
              res.setHeader('Content-Type', 'text/plain');
              return res.end(JSON.stringify(result));
            });
          } else {
            res.setHeader('Content-Type', 'text/plain');
            return res.end(JSON.stringify({
              result: 'Недостатньо вільного кабелю! Максимальна довжина для планування : ' + unplanned + ' (м)'
            }));
          }
        });
      });
    });
    app.post('/saveopticaluse', accessChecker.checkAccess, function(req, res) {
      var income_id, length, opticalusedata, plan_id, user;
      length = 0;
      user = req.session.login;
      opticalusedata = req.body.data;
      opticalusedata.user = user;
      plan_id = req.body.plan_id;
      income_id = req.body.income_id;
      return db.getById('opticalplans', plan_id, function(plan) {
        var matchresult, plannedcablelengthleft;
        plan = plan[0];
        opticalusedata.intensions = plan.intensions;
        matchresult = '';
        plannedcablelengthleft = plan.length - opticalusedata.length;
        if (plannedcablelengthleft < 0) {
          matchresult = 'overused';
        } else {
          matchresult = 'ok';
        }
        switch (matchresult) {
          case 'ok':
            return db.getById('opticalincome', income_id, function(income) {
              var incomeobj, newlength;
              incomeobj = income[0];
              newlength = +incomeobj.length - +opticalusedata.length;
              return db.update("opticalincome", income_id, {
                "length": newlength
              }, 'set', function() {
                saveOpticalUse(opticalusedata, res, plan.intensionstype);
                saveOpticalUseLog(opticalusedata.length, opticalusedata.intensions, incomeobj.manufacturer, incomeobj.fibers, req.session.login);
                if (plan.intensionstype === "1") {
                  saveWorkerCash(opticalusedata);
                }
                return db.remove('opticalplans', plan_id, function() {});
              });
            });
          case 'overused':
            return db.getById('opticalincome', income_id, function(income) {
              var incomeobj;
              incomeobj = income[0];
              return db.getByParam('opticalplans', {
                income_id: incomeobj._id.toString()
              }, function(plans) {
                var totalplanned, _i, _len;
                totalplanned = 0;
                for (_i = 0, _len = plans.length; _i < _len; _i++) {
                  plan = plans[_i];
                  totalplanned += +plan.length;
                }
                if ((+incomeobj.length - totalplanned) >= (plannedcablelengthleft * -1)) {
                  db.update("opticalincome", income_id, {
                    "length": +incomeobj.length - opticalusedata.length
                  }, 'set', function() {});
                  db.remove('opticalplans', plan_id, function() {});
                  saveOpticalUse(opticalusedata, res);
                  saveOpticalUseLog(opticalusedata.length, opticalusedata.intensions, incomeobj.manufacturer, incomeobj.fibers, req.session.login);
                  if (plan.intensionstype === "1") {
                    return saveWorkerCash(opticalusedata);
                  }
                } else {
                  res.setHeader('Content-Type', 'text/plain');
                  return res.end(JSON.stringify({
                    result: "Вказана довжина кабелю перевищую доступну! Відмініть плани на використання кабелю і повторіть операцію або вкіжіть меншу довжину!"
                  }));
                }
              });
            });
        }
      });
    });
    saveOpticalUse = function(opticalusedata, res) {
      return db.save('opticaluse', opticalusedata, function(result) {
        res.setHeader('Content-Type', 'text/plain');
        return res.end(JSON.stringify(result));
      });
    };
    saveWorkerCash = function(opticalusedata) {
      var cablelength, worker, _i, _len, _ref, _results;
      cablelength = opticalusedata.length / opticalusedata.workers.length;
      _ref = opticalusedata.workers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        worker = _ref[_i];
        _results.push(db.save('workerscash', {
          "name": worker,
          "cash": cablelength.toFixed(),
          "intensions": opticalusedata.intensions
        }, function(result) {}));
      }
      return _results;
    };
    saveOpticalUseLog = function(length, intensions, manufacturer, fibers, user) {
      return db.save('opticallogs', {
        "action": 'Виконав заплановану роботу',
        "length": length,
        "date": new Date().toISOString(),
        "intensions": intensions,
        "cable": manufacturer + ", волокон : " + fibers,
        "user": user
      }, function() {});
    };
    return app.get('/getworkerscash', accessChecker.checkAccess, function(req, res) {
      var coeff;
      coeff = req.query.coefficient;
      return db.getAll('workerscash', function(cash) {
        var c, count, datarow, values, _i, _len;
        values = [];
        count = 1;
        for (_i = 0, _len = cash.length; _i < _len; _i++) {
          c = cash[_i];
          datarow = {
            "id": c._id,
            "rowdata": []
          };
          datarow.rowdata.push(count);
          datarow.rowdata.push(c.name);
          datarow.rowdata.push(c.intensions);
          datarow.rowdata.push(c.cash);
          values.push(datarow);
          count++;
        }
        res.setHeader('Content-Type', 'text/plain');
        return res.end(JSON.stringify({
          "title": "Перелік премій",
          "headers": ['№', 'Монтажник', 'Робота', 'Розмір премії', 'Видати'],
          "values": values,
          "style": "table table-bordered table-hover table-condensed"
        }));
      });
    });
  };

}).call(this);
