// Generated by CoffeeScript 1.7.1
(function() {
  $(document).ready(function() {
    var BUILDINGS_LIST, addNewBoxToBuilding, assignEventsListeners, boxSelectors, buildingSelectors, changeBoxType, changeBuildingInfo, changeConnectionType, changeLogTimeout, clearTextInput, commutatorSelectors, deleteBoxCommutator, deleteBoxOdf, deleteBoxUps, deleteBuildingsBox, getBoxData, getBuildingData, getBuildingInfo, getChangeLogsByDate, getConnectorData, getDataForBuildingsList, getNewCommutatorData, getNewCommutatorNameData, getNewConnectionTypeValue, getNewOdfData, getNewUpsData, getOdfData, getSelectedBoxCommutatorId, getSelectedBoxOdfId, getSelectedBoxTypeId, getSelectedBoxUpsId, getSelectedBuildingBoxId, getSelectedBuildingFrom, getSelectedBuildingTo, getSelectedConnectorId, getStreetIdOnBuildingAdderSelector, getStreetIdOnMainSelector, getStreetName, getUpsData, getWorkerName, hideVisibleBlocks, isOptionSelected, ismanageablecommutatorselected, odfselectors, popualteUpsesSelectors, populateBoxesSelectors, populateBuildingsList, populateBuildingsSelectors, populateCommutatorSelectors, populateConnectionsList, populateODFSelectors, populateSelectorsFromDB, populateStreetNamesSelectors, populateWorkerSelectors, removeBoxName, removeBuildingConnector, removeCommutatorName, removeOdfName, removeUpsName, removeWorkerName, renameStreetName, saveBoxName, saveBuilding, saveBuildingConnector, saveChangeLog, saveCommutatorName, saveNewBox, saveNewCommutator, saveNewOdf, saveNewUps, saveOdfName, saveStreetName, saveUpsName, saveWorkerName, searchInSelector, selectedbuilding_id, sendSelectedFileViaXMLHttpReq, showBuildingInfo, showChangeLog, showConfirmDialog, showProgressInfo, streetselectors, triggerClickEventOnBoxesListElement, triggerClickEventOnBuildingsListElement, upsesSelectors, workerSelectors;
    $(window).keydown(function(event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        return false;
      }
    });
    changeLogTimeout = null;
    String.prototype.capitalize = function() {
      return this.charAt(0).toUpperCase() + this.slice(1);
    };
    BUILDINGS_LIST = [];
    selectedbuilding_id = "";
    getSelectedBuildingBoxId = "";
    getSelectedBoxCommutatorId = "";
    getSelectedBoxUpsId = "";
    getSelectedBoxOdfId = "";
    ismanageablecommutatorselected = false;
    streetselectors = [];
    buildingSelectors = [];
    commutatorSelectors = [];
    boxSelectors = [];
    odfselectors = [];
    upsesSelectors = [];
    workerSelectors = [];
    workerSelectors.push($("#workerselector_main"));
    upsesSelectors.push($("#upsselector"));
    upsesSelectors.push($("#changeupseslist"));
    odfselectors.push($("#odfselector"));
    odfselectors.push($("#changeodflist"));
    streetselectors.push($("#streetselector_building"));
    streetselectors.push($("#streetselector"));
    buildingSelectors.push($("#buildingselector_from"));
    buildingSelectors.push($("#buildingselector_to"));
    commutatorSelectors.push($("#comselector"));
    commutatorSelectors.push($("#changecommutatorlist"));
    boxSelectors.push($("#boxselector"));
    boxSelectors.push($("#addnewbuildingsboxselector"));
    boxSelectors.push($("#changebuildingsboxselector"));
    utils.setServerCommunicator(serverCommunicator.getInstance());
    $.extend($.validator.messages, {
      required: "Заповніть поле!",
      remote: "Please fix this field.",
      email: "Please enter a valid email address.",
      url: "Please enter a valid URL.",
      date: "Please enter a valid date.",
      dateISO: "Please enter a valid date (ISO).",
      number: "Please enter a valid number.",
      digits: "Тільки цифрові значення.",
      creditcard: "Please enter a valid credit card number.",
      equalTo: "Please enter the same value again.",
      accept: "Please enter a value with a valid extension.",
      maxlength: jQuery.validator.format("Please enter no more than {0} characters."),
      minlength: jQuery.validator.format("Please enter at least {0} characters."),
      rangelength: jQuery.validator.format("Please enter a value between {0} and {1} characters long."),
      range: jQuery.validator.format("Please enter a value between {0} and {1}."),
      max: jQuery.validator.format("Please enter a value less than or equal to {0}."),
      min: jQuery.validator.format("Please enter a value greater than or equal to {0}.")
    });
    $.validator.addMethod("uploadFile", function(val, element) {
      var allow, ext;
      ext = $(element).val().split('.')[1].toLowerCase();
      allow = ['jpeg', 'bmp', 'png', 'jpg'];
      if ($.inArray(ext, allow) === -1) {
        return false;
      } else {
        return true;
      }
    }, "Невірний формат файлу!");
    showConfirmDialog = function(fn) {
      $("#delconfirmmodal").modal('show');
      return $("#deleteitemirreversibly").bind('click', function() {
        fn();
        $("#deleteitemirreversibly").unbind('click');
        return $("#delconfirmmodal").modal('hide');
      });
    };
    hideVisibleBlocks = function() {
      var e, elems, _i, _len, _results;
      elems = [$("#commutatoradder"), $("#boxadder"), $("#upsadder"), $("#odfadder"), $("#personnel"), $("#streetadder"), $("#buildingadder"), $("#connectionsrow"), $("#changelogblock")];
      _results = [];
      for (_i = 0, _len = elems.length; _i < _len; _i++) {
        e = elems[_i];
        if (e.is(':visible')) {
          _results.push(e.hide());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    assignEventsListeners = function() {
      $("#addnewbuildingsboxselector").bind('click', function() {
        var name;
        name = $("#addnewbuildingsboxselector option:selected").val();
        return $("#imagenewbox").attr('src', '/app/images/boxes/' + name + '.jpg');
      });
      $("#changebuildingsboxselector").bind('click', function() {
        var name;
        name = $("#addnewbuildingsboxselector option:selected").val();
        return $("#imagenewbox").attr('src', '/app/images/boxes/' + name + '.jpg');
      });
      $('#editcombtn').bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#commutatoradder"));
      });
      $('#editboxbtn').bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#boxadder"));
      });
      $('#editupsbtn').bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#upsadder"));
      });
      $('#editodfbtn').bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#odfadder"));
      });
      $("#editpersonnel").bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#personnel"));
      });
      $('#closeodfadder').bind('click', function() {
        return $("#odfadder").hide();
      });
      $('#closecommutatoradder').bind('click', function() {
        return $("#commutatoradder").hide();
      });
      $('#closeboxadder').bind('click', function() {
        return $("#boxadder").hide();
      });
      $('#closeupsadder').bind('click', function() {
        return $("#upsadder").hide();
      });
      $('#closestreetadder').bind('click', function() {
        return $("#streetadder").hide();
      });
      $('#closebuildingadder').bind('click', function() {
        return $("#buildingadder").hide();
      });
      $('#closeworkeradder').bind('click', function() {
        return $("#personnel").hide();
      });
      $('#closequipmentchange').bind('click', function() {
        return $("#changeEquipment").hide();
      });
      $('#closeconnectionsadder').bind('click', function() {
        return $("#connectionsrow").hide();
      });
      $("#addbuilding").bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#buildingadder"));
      });
      $("#addstreet").bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#streetadder"));
      });
      $("#connections").bind('click', function() {
        hideVisibleBlocks();
        return utils.displayIfInvisible($("#connectionsrow"));
      });
      $("#cablereport").bind('click', function() {
        return utils.displayIfInvisible($("#usetable"));
      });
      $("#cableincomereport").bind('click', function() {
        return utils.displayIfInvisible($("#incometable"));
      });
      $("#changeEquipmentBtn").bind('click', function() {
        return utils.displayIfInvisible($("#changeEquipment"));
      });
      $('#manageableButtonYes').bind('click', function() {
        if ($('#manageableButtonYes').hasClass('btn-info')) {
          return $('#manageableButtonYes').removeClass('btn-info');
        } else {
          return $('#manageableButtonYes').addClass('btn-info');
        }
      });
      $("#changecommutatorlist").bind('change', function(e) {
        return utils.getDataFromDB({
          "parameters": [
            {
              "param_name": "collection",
              "param_value": "commutatornames"
            }
          ],
          "path": "getsaveditems"
        }, function(commutatornames) {
          var id;
          id = $("#" + e.target.getAttribute('id') + " option:selected").val();
          if (commutatornames.filter(function(elem) {
            return elem._id.toString() === id;
          })[0].manageable) {
            $("#mancomadditionalfields").show();
            return ismanageablecommutatorselected = true;
          } else {
            return $("#mancomadditionalfields").hide();
          }
        });
      });
      $("#logout").bind('click', function() {
        return window.location.href = '/logout';
      });
      $("#changelog").bind('click', function() {
        hideVisibleBlocks();
        showChangeLog();
        return utils.displayIfInvisible($("#changelogblock"));
      });
      $("#changelogstartdate").bind('change', function() {
        if (changeLogTimeout) {
          clearTimeout(changeLogTimeout);
        }
        return changeLogTimeout = setTimeout(getChangeLogsByDate, 2000);
      });
      $("#changelogenddate").bind('change', function() {
        if (changeLogTimeout) {
          clearTimeout(changeLogTimeout);
        }
        return changeLogTimeout = setTimeout(getChangeLogsByDate, 2000);
      });
      $("#closechangelog").bind('click', function() {
        return $("#changelogblock").hide();
      });
      $("input[type=date]").val(new Date().toISOString().slice(0, 10));
      $('#addstreetbtn').bind('click', function(e) {
        if ($("#newstreetnameform").valid()) {
          return saveStreetName(getStreetName(), function() {
            clearTextInput(e.target.id);
            return populateStreetNamesSelectors();
          });
        }
      });
      $("#showrenamefield").bind('click', function() {
        return utils.displayIfInvisible($("#streetrenameform"));
      });
      $("#renamestreetbtn").bind('click', function() {
        if ($("#streetrenameform").valid()) {
          return renameStreetName(getStreetIdOnMainSelector(), function() {
            return populateStreetNamesSelectors();
          });
        }
      });
      $("#savebuildingbtn").bind('click', function(e) {
        var id;
        id = e.target.id;
        if ($("#buildingnumberform").valid()) {
          saveBuilding(getBuildingData(), function(saved) {
            return getDataForBuildingsList();
          });
          return clearTextInput(id);
        }
      });
      $("#connectbuildingsbtn").bind('click', function() {
        if (isOptionSelected($("#buildingselector_from")) && isOptionSelected($("#buildingselector_to"))) {
          return saveBuildingConnector(getConnectorData(), function() {
            return populateConnectionsList();
          });
        }
      });
      $("#delconnectionbtn").bind('click', function(e) {
        if (isOptionSelected($("#connectionslist"))) {
          return showConfirmDialog(function() {
            return removeBuildingConnector(getSelectedConnectorId(), function() {
              return populateConnectionsList();
            });
          });
        }
      });
      $("#buildingssearchfield").bind('keydown keyup change', function() {
        return searchInSelector($("#connectionslist"), $("#buildingssearchfield").val());
      });
      $("#changeconnectiontypebtn").bind('click', function() {
        return changeConnectionType(getSelectedConnectorId(), getNewConnectionTypeValue(), function() {
          return populateConnectionsList();
        });
      });
      $("#addcombtn").bind('click', function(e) {
        if ($("#newcomform").valid()) {
          saveCommutatorName(getNewCommutatorNameData(), function() {
            return populateCommutatorSelectors();
          });
          return clearTextInput(e.target.id);
        }
      });
      $("#delcombtn").bind('click', function() {
        return showConfirmDialog(function() {
          return removeCommutatorName($("#comselector").val(), function() {
            return populateCommutatorSelectors();
          });
        });
      });
      $("#addupsbtn").bind('click', function(e) {
        if ($("#newupsnameform").valid()) {
          saveUpsName(getUpsData(), function() {
            return populateSelectorsFromDB(upsesSelectors, 'upsnames', ['name']);
          });
          return clearTextInput(e.target.id);
        }
      });
      $("#delupsbtn").bind('click', function() {
        return showConfirmDialog(function() {
          return removeUpsName($("#upsselector").val(), function() {
            return populateSelectorsFromDB(upsesSelectors, 'upsnames', ['name']);
          });
        });
      });
      $("#addodfbtn").bind('click', function(e) {
        if ($("#newodfnameform").valid()) {
          saveOdfName(getOdfData(), function() {
            return populateSelectorsFromDB(odfselectors, 'odfnames', ['name']);
          });
          return clearTextInput(e.target.id);
        }
      });
      $("#delodfbtn").bind('click', function() {
        return showConfirmDialog(function() {
          return removeOdfName($("#odfselector").val(), function() {
            return populateSelectorsFromDB(odfselectors, 'odfnames', ['name']);
          });
        });
      });
      $("#addboxbtn").bind('click', function(e) {
        if ($("#newboxnameform").valid()) {
          saveBoxName(getBoxData(), function() {
            return populateBoxesSelectors();
          });
          return clearTextInput(e.target.id);
        }
      });
      $("#deleteboxbtn").bind('click', function() {
        return showConfirmDialog(function() {
          return removeBoxName($("#boxselector").val(), function() {
            return populateBoxesSelectors();
          });
        });
      });
      $("#addworkerbtn").bind('click', function(e) {
        if ($("#workerform").valid()) {
          saveWorkerName(getWorkerName(), function() {
            return populateWorkerSelectors();
          });
          return clearTextInput(e.target.id);
        }
      });
      $("#delworkerbtn").bind('click', function() {
        return showConfirmDialog(function() {
          return removeWorkerName($("#workerselector_main").val(), function() {
            return populateWorkerSelectors();
          });
        });
      });
      $("#changebuildinginfo").bind('click', function() {
        changeBuildingInfo(getBuildingInfo(), selectedbuilding_id);
        return $("button.close").trigger('click');
      });
      $("#addnewboxtobuilding").bind('click', function() {
        addNewBoxToBuilding(getSelectedBoxTypeId(), selectedbuilding_id);
        return $("button.close").trigger('click');
      });
      $("#delbuildingsboxbtn").bind('click', function() {
        if ($("#buildingboxeslist option:selected").length > 0) {
          return showConfirmDialog(function() {
            return deleteBuildingsBox(getSelectedBuildingBoxId(), selectedbuilding_id);
          });
        }
      });
      $("#changeboxtype").bind('click', function() {
        if ($("#buildingboxeslist option:selected").length > 0) {
          changeBoxType($("#changebuildingsboxselector option:selected").text().trim());
          return $("#button.close").trigger('click');
        }
      });
      $("#addcomtobox").bind('click', function() {
        return saveNewCommutator(getNewCommutatorData(), function(commutator) {
          var id;
          id = getSelectedBuildingBoxId();
          return utils.postToServer('update', {
            "collection": 'equipment',
            "_id": id,
            "data": {
              'commutators': commutator._id
            },
            "update_type": "push"
          }, function() {
            triggerClickEventOnBuildingsListElement(selectedbuilding_id);
            return $("button.close").trigger('click');
          });
        });
      });
      $("#delboxcombtn").bind('click', function() {
        if ($("#boxcommutatorlist option:selected").length > 0) {
          return showConfirmDialog(function() {
            return deleteBoxCommutator(getSelectedBuildingBoxId(), getSelectedBoxCommutatorId());
          });
        }
      });
      $("#addupstobox").bind('click', function() {
        return saveNewUps(getNewUpsData(), function(ups) {
          return utils.postToServer('update', {
            "collection": 'equipment',
            "_id": getSelectedBuildingBoxId(),
            "data": {
              'upses': ups._id
            },
            "update_type": "push"
          }, function() {
            triggerClickEventOnBuildingsListElement(selectedbuilding_id);
            return $("button.close").trigger('click');
          });
        });
      });
      $("#delboxups").bind('click', function() {
        if ($("#boxupseslist option:selected").length > 0) {
          return showConfirmDialog(function() {
            return deleteBoxUps(getSelectedBuildingBoxId(), getSelectedBoxUpsId());
          });
        }
      });
      $("#addodfbutton").bind('click', function() {
        return saveNewOdf(getNewOdfData(), function(odf) {
          return utils.postToServer('update', {
            "collection": 'equipment',
            "_id": getSelectedBuildingBoxId(),
            "data": {
              'odf': odf._id
            },
            "update_type": "push"
          }, function() {
            triggerClickEventOnBuildingsListElement(selectedbuilding_id);
            return $("button.close").trigger('click');
          });
        });
      });
      $("#delboxodf").bind('click', function() {
        if ($("#boxodflist  option:selected").length > 0) {
          return showConfirmDialog(function() {
            return deleteBoxOdf(getSelectedBuildingBoxId(), getSelectedBoxOdfId());
          });
        }
      });
      $("#freeports").bind('click', function() {
        return $("#freeportsModal").modal('show');
      });
      $("#addfreeports").bind('click', function() {
        if ($("#freeportsform").valid()) {
          return utils.postToServer('update', {
            "collection": 'equipment',
            "_id": getSelectedBoxCommutatorId(),
            "data": {
              'free': $("#freeportsfield").val()
            },
            "update_type": "set"
          }, function() {
            showBuildingInfo($("#buildingslist li.active a").attr('value'));
            return $("button.close").trigger('click');
          });
        }
      });
      return $("#mainbuildingssearch").bind('keyup', function() {
        var searchterm;
        searchterm = $("#mainbuildingssearch").val();
        return populateBuildingsList(BUILDINGS_LIST, searchterm);
      });
    };
    saveStreetName = function(street_name, callback) {
      return utils.postToServer("saveitem", {
        "name": street_name,
        "collection": "streetnames"
      }, function() {
        return callback();
      });
    };
    renameStreetName = function(street_name_id, callback) {
      return utils.postToServer("update", {
        "collection": "streetnames",
        "_id": street_name_id,
        "data": {
          'name': $("#renamefield").val().trim()
        },
        "update_type": "set"
      }, function() {
        return callback();
      });
    };
    saveBuilding = function(data, callback) {
      return utils.postToServer("saveitem", {
        "collection": "buildings",
        "item": data
      }, function(saved) {
        return callback(saved);
      });
    };
    saveBuildingConnector = function(data, callback) {
      return utils.postToServer("saveitem", {
        "collection": "connectors",
        "item": data
      }, function() {
        return callback();
      });
    };
    removeBuildingConnector = function(_id, callback) {
      return utils.postToServer("deleteitem", {
        "collection": "connectors",
        "_id": _id
      }, function() {
        return callback();
      });
    };
    saveCommutatorName = function(data, callback) {
      return utils.postToServer("saveitem", {
        "collection": "commutatornames",
        "name": data.name,
        "manageable": data.manageable
      }, function() {
        return callback();
      });
    };
    saveWorkerName = function(name, callback) {
      return utils.postToServer("saveitem", {
        "collection": "workers",
        "name": name
      }, function() {
        return callback();
      });
    };
    saveBoxName = function(name, callback) {
      return utils.postToServer("saveitem", {
        "collection": "boxesnames",
        "name": name
      }, function() {
        return callback();
      });
    };
    saveOdfName = function(name, callback) {
      return utils.postToServer("saveitem", {
        "collection": "odfnames",
        "name": name
      }, function() {
        return callback();
      });
    };
    saveUpsName = function(name, callback) {
      return utils.postToServer("saveitem", {
        "collection": "upsnames",
        "name": name
      }, function() {
        return callback();
      });
    };
    removeCommutatorName = function(_id, callback) {
      return utils.postToServer("deleteitem", {
        "collection": "commutatornames",
        "_id": _id
      }, function() {
        return callback();
      });
    };
    removeWorkerName = function(_id, callback) {
      return utils.postToServer("deleteitem", {
        "collection": "workers",
        "_id": _id
      }, function() {
        return callback();
      });
    };
    removeBoxName = function(_id, callback) {
      return utils.postToServer("deleteitem", {
        "collection": "boxesnames",
        "_id": _id
      }, function() {
        return callback();
      });
    };
    removeOdfName = function(_id, callback) {
      return utils.postToServer("deleteitem", {
        "collection": "odfnames",
        "_id": _id
      }, function() {
        return callback();
      });
    };
    removeUpsName = function(_id, callback) {
      return utils.postToServer("deleteitem", {
        "collection": "upsnames",
        "_id": _id
      }, function() {
        return callback();
      });
    };
    saveNewBox = function(box_name_id, callback) {
      return utils.postToServer("saveitem", {
        "collection": "equipment",
        "_id": box_name_id,
        "type": 'box'
      }, function(box) {
        return callback(box);
      });
    };
    saveNewCommutator = function(commutator_data, callback) {
      var type;
      type = 'commutator';
      if (commutator_data.manageable === true) {
        type = 'mancommutator';
      }
      return utils.postToServer("saveitem", {
        "collection": "equipment",
        "data": commutator_data,
        "type": type
      }, function(commutator) {
        callback(commutator);
        return saveChangeLog(commutator.name, "Додано", " Коробка: " + $("#buildingboxeslist option:selected").text());
      });
    };
    saveNewUps = function(ups_data, callback) {
      return utils.postToServer("saveitem", {
        "collection": "equipment",
        "data": ups_data,
        "type": 'ups'
      }, function(ups) {
        callback(ups);
        return saveChangeLog(ups.name, "Додано", " Коробка: " + $("#buildingboxeslist option:selected").text());
      });
    };
    saveNewOdf = function(odf_data, callback) {
      return utils.postToServer("saveitem", {
        "collection": "equipment",
        "data": odf_data,
        "type": 'odf'
      }, function(odf) {
        callback(odf);
        return saveChangeLog(odf.name, "Додано", " Коробка: " + $("#buildingboxeslist option:selected").text());
      });
    };
    getNewConnectionTypeValue = function() {
      return $("#connectiontype_change").val();
    };
    getSelectedConnectorId = function() {
      return $("#connectionslist").val();
    };
    getStreetIdOnMainSelector = function() {
      return $("#streetselector").val();
    };
    getStreetIdOnBuildingAdderSelector = function() {
      return $("#streetselector_building").val();
    };
    getStreetName = function() {
      return $('#newstreetnamefield').val().capitalize();
    };
    getWorkerName = function() {
      return $("#newworkernamefield").val();
    };
    getNewCommutatorData = function() {
      var commutatordata;
      commutatordata = {
        "_id": $("#changecommutatorlist option:selected").val(),
        "manageable": false
      };
      if (ismanageablecommutatorselected) {
        commutatordata["ip"] = $("#mancomip").val();
        commutatordata["login"] = $("#mancomlogin").val();
        commutatordata["pass"] = $("#mancompass").val();
        commutatordata.manageable = true;
      }
      return commutatordata;
    };
    getNewUpsData = function() {
      return {
        "_id": $("#changeupseslist option:selected").val()
      };
    };
    getNewOdfData = function() {
      return {
        "_id": $("#changeodflist option:selected").val()
      };
    };
    getNewCommutatorNameData = function() {
      return {
        "name": $("#newcomname").val(),
        "manageable": $("#manageableButtonYes").hasClass("active")
      };
    };
    getUpsData = function() {
      return $("#newupsname").val();
    };
    getOdfData = function() {
      return $("#newodfname").val();
    };
    getBoxData = function() {
      return $("#newboxname").val();
    };
    getBuildingInfo = function() {
      return {
        entrance: $("#newentranceinfo").val(),
        flat: $("#newkeyinfo").val(),
        info: $("#newadditionalinfo").val(),
        ladder: $("#newladderinfo").val()
      };
    };
    getBuildingData = function() {
      return {
        street: getStreetIdOnBuildingAdderSelector(),
        type: $("#buildingtypeselector").val(),
        number: $("#streetnumber").val()
      };
    };
    getConnectorData = function() {
      return {
        type: $("#connectiontype").val(),
        parent: $("#buildingselector_from").val(),
        out: $("#buildingselector_to").val()
      };
    };
    getSelectedBuildingBoxId = function() {
      return $("#buildingboxeslist option:selected").val();
    };
    getSelectedBoxTypeId = function() {
      return $("#addnewbuildingsboxselector").val();
    };
    getSelectedBoxOdfId = function() {
      return $("#boxodflist option:selected").val();
    };
    getSelectedBoxUpsId = function() {
      return $("#boxupseslist option:selected").val();
    };
    getSelectedBoxCommutatorId = function() {
      return $("#boxcommutatorlist option:selected").val();
    };
    getSelectedBuildingFrom = function() {
      return $("#buildingselector_from option:selected");
    };
    getSelectedBuildingTo = function() {
      return $("#buildingselector_to option:selected");
    };
    populateBuildingsList = function(buildings, filter) {
      var displayBuildingsList, filterAndDisplayBuildingListData;
      filterAndDisplayBuildingListData = function(buildings, filter) {
        var filtered;
        buildings.sort(utils.compareBuildings);
        populateBuildingsSelectors(buildings);
        if (filter.length > 0) {
          filtered = buildings.filter(function(elem) {
            return elem.street.toLowerCase().indexOf(filter) !== -1;
          });
          return displayBuildingsList(filtered);
        } else {
          return displayBuildingsList(buildings);
        }
      };
      displayBuildingsList = function(buildings) {
        var b, elem, _i, _len;
        for (_i = 0, _len = buildings.length; _i < _len; _i++) {
          b = buildings[_i];
          elem = $("<li><a value=" + b._id + ">" + b.street + ", " + b.number + "</a></li>");
          elem.bind('click', function(e) {
            $("#buildingslist li.active").attr('class', '');
            e.target.parentNode.className = 'active';
            selectedbuilding_id = e.target.getAttribute('value').toString();
            return showBuildingInfo(selectedbuilding_id);
          });
          $("#buildingslist").append(elem);
        }
        ymaps.ready(function() {
          return initYandexMaps();
        });
        return $("#buildingslist li:nth-child(2) a").trigger('click');
      };
      $("#buildingslist").empty();
      $("#buildingslist").append("<li class='nav-header'>АДРЕСИ</li>");
      return filterAndDisplayBuildingListData(buildings, filter);
    };
    getDataForBuildingsList = function() {
      return utils.getDataFromDB({
        "parameters": [
          {
            "param_name": "collection",
            "param_value": "buildings"
          }
        ],
        "path": "getsaveditems"
      }, function(buildings) {
        BUILDINGS_LIST = buildings;
        return populateBuildingsList(BUILDINGS_LIST, "");
      });
    };
    showChangeLog = function() {
      return utils.getDataFromDB({
        "path": "getsaveditems",
        "parameters": [
          {
            "param_name": "collection",
            "param_value": "logs"
          }
        ]
      }, function(loginfo) {
        var table;
        table = utils.createTable(loginfo);
        $("#changelogtable").empty();
        return $("#changelogtable").append(table);
      });
    };
    getChangeLogsByDate = function() {
      var end, start;
      start = $("#changelogstartdate").val().split("-");
      end = $("#changelogenddate").val().split("-");
      return utils.getDataFromDB({
        "path": "getchangelogs",
        "parameters": [
          {
            "param_name": "syear",
            "param_value": start[0]
          }, {
            "param_name": "smonth",
            "param_value": start[1] - 1
          }, {
            "param_name": "sday",
            "param_value": start[2]
          }, {
            "param_name": "eyear",
            "param_value": end[0]
          }, {
            "param_name": "emonth",
            "param_value": end[1] - 1
          }, {
            "param_name": "eday",
            "param_value": end[2]
          }
        ]
      }, function(loginfo) {
        var table;
        table = utils.createTable(loginfo);
        $("#changelogtable").empty();
        return $("#changelogtable").append(table);
      });
    };
    showBuildingInfo = function(building_id) {
      var fillConnectionsInfo, fillEquipmentInfo, fillGeneralBuildingInfo;
      utils.getDataFromDB({
        "parameters": [
          {
            "param_name": "collection",
            "param_value": "buildings"
          }, {
            "param_name": "building_id",
            "param_value": building_id.toString()
          }
        ],
        "path": "getsaveditems"
      }, function(buildinginfo) {
        fillGeneralBuildingInfo(buildinginfo.general);
        fillConnectionsInfo(buildinginfo.connections);
        return fillEquipmentInfo(buildinginfo.equipment);
      });
      fillGeneralBuildingInfo = function(info) {
        $("#buildingnameinfo").text(info.name);
        $("#entranceinfo").text(info.entrance);
        $("#typeinfo").text(info.type);
        $("#keyinfo").text(info.flat);
        $("#additionalinfo").text(info.info);
        $("#ladderinfo").text(info.ladder);
        $('#newentranceinfo').val(info.entrance);
        $('#newkeyinfo').val(info.flat);
        $('#newadditionalinfo').val(info.info);
        return $('#newladderinfo').val(info.ladder);
      };
      fillConnectionsInfo = function(info) {
        var createElementAndBindEvent, showConnections;
        showConnections = function(elem, connectors) {
          var connector, infoelem, _i, _len, _results;
          elem.empty();
          _results = [];
          for (_i = 0, _len = connectors.length; _i < _len; _i++) {
            connector = connectors[_i];
            infoelem = createElementAndBindEvent(connector);
            _results.push(elem.append(infoelem));
          }
          return _results;
        };
        createElementAndBindEvent = function(connector) {
          var elem;
          elem = $('<div style="margin-top : 7px" class="btn" value=' + connector.building_id + '>' + connector.building_name + ' Тип: ' + connector.type + '</div>');
          elem.bind('click', function(e) {
            return triggerClickEventOnBuildingsListElement(e.target.getAttribute('value'));
          });
          return elem;
        };
        showConnections($("#linkfrominfo"), info.incoming_connections);
        return showConnections($("#linkoutinfo"), info.outgoing_connections);
      };
      return fillEquipmentInfo = function(info) {
        var anchor, commutator, div, elem, odf, popualateRelatedEquipmentSelectors, populateBoxSelector, populateEquipmentSelector, populateinfoblock, ups, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _results;
        populateinfoblock = function(elem, text, style, value) {
          return elem.append($("<div><label value='" + value + "' class='label " + style + "'>" + text + "</label></div>"));
        };
        populateBoxSelector = function(info) {
          var elem, i, value_to_preselect, _i, _len;
          $("#buildingboxeslist").empty();
          value_to_preselect = null;
          for (_i = 0, _len = info.length; _i < _len; _i++) {
            i = info[_i];
            if (value_to_preselect === null) {
              value_to_preselect = i.box._id;
            }
            elem = $("<option value=" + i.box._id + ">" + i.box.name + "</option>");
            elem.bind('click', function(e) {
              var id;
              id = e.target.getAttribute('value');
              return popualateRelatedEquipmentSelectors(id, info);
            });
            $("#buildingboxeslist").append(elem);
          }
          $("#buildingboxeslist").val(value_to_preselect);
          return $("#buildingboxeslist option:selected").trigger('click');
        };
        populateEquipmentSelector = function(selector, data, fn) {
          var d, elem, value_to_preselect, _i, _len, _results;
          selector.empty();
          value_to_preselect = null;
          _results = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            d = data[_i];
            if (value_to_preselect === null) {
              value_to_preselect = d._id;
            }
            elem = $("<option value=" + d._id + ">" + d.name + "</option>");
            elem.bind('click', function(e) {
              var id;
              id = e.target.getAttribute('value');
              return fn(id);
            });
            selector.append(elem);
            _results.push(selector.val(value_to_preselect));
          }
          return _results;
        };
        popualateRelatedEquipmentSelectors = function(box_id, info) {
          info = info.filter(function(elem) {
            return elem.box._id.toString() === box_id;
          })[0];
          populateEquipmentSelector($("#boxcommutatorlist"), info.commutators, function(id) {});
          populateEquipmentSelector($("#boxupseslist"), info.upses, function(id) {});
          return populateEquipmentSelector($("#boxodflist"), info.odf, function(id) {});
        };
        populateBoxSelector(info);
        $("#equipmentinfo").empty();
        _results = [];
        for (_i = 0, _len = info.length; _i < _len; _i++) {
          elem = info[_i];
          div = $('<div>');
          populateinfoblock(div, elem.box.name, "label-important", elem.box._id);
          populateinfoblock(div, "Комутатори", "label-inverse equipmentinfolabel", "");
          _ref = elem.commutators;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            commutator = _ref[_j];
            populateinfoblock(div, commutator.name + " Вільно: " + commutator.free, "equipmentinfolabel", commutator._id);
          }
          populateinfoblock(div, "Блоки живлення", "label-inverse equipmentinfolabel");
          _ref1 = elem.upses;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            ups = _ref1[_k];
            populateinfoblock(div, ups.name, "equipmentinfolabel", ups._id);
          }
          populateinfoblock(div, "ODF", "label-inverse equipmentinfolabel");
          _ref2 = elem.odf;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            odf = _ref2[_l];
            anchor = $("<a href='#savedodfimagesModal' value='" + odf._id + "'role='button' class='label equipmentinfolabel' data-toggle='modal'>" + odf.name + "</a>");
            anchor.bind('click', function(e) {
              var value;
              value = e.target.getAttribute('value');
              return utils.getFilesList({
                "path": 'odfimageslist',
                "value": value
              }, function(data) {
                var count, date, file, image, path, _len4, _m, _ref3, _results1;
                $("#odfimagescontainer").empty();
                count = 0;
                _ref3 = data.files;
                _results1 = [];
                for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
                  file = _ref3[_m];
                  path = "/app/images/odfimgs/" + value + "/" + file;
                  date = file.split('.')[0];
                  image = $("<div class='controls controls-row'> <label class='label label-important span'>" + date + "</label> <a class='span' href=" + path + "><img class='img-rounded' src='" + path + "' style='width: 100px; height:70px;'></a> </div>");
                  $("#odfimagescontainer").append(image);
                  _results1.push(count++);
                }
                return _results1;
              });
            });
            div.append(anchor);
          }
          _results.push($("#equipmentinfo").append(div));
        }
        return _results;
      };
    };
    populateBuildingsSelectors = function(data) {
      return utils.fillselectors(data, buildingSelectors, ['street', 'number']);
    };
    populateConnectionsList = function() {
      $("#connectionslist").empty();
      return utils.getDataFromDB({
        "parameters": [
          {
            "param_name": "collection",
            "param_value": "connectors"
          }
        ],
        "path": "getsaveditems"
      }, function(data) {
        var i, _i, _len, _results;
        data.sort(utils.compareConnections);
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          i = data[_i];
          _results.push($("#connectionslist").append("<option value=" + i._id + ">" + i.parent.street + " " + i.parent.number + " --> " + i.out.street + " " + i.out.number + " " + "(" + i.type + ")" + "</option>"));
        }
        return _results;
      });
    };
    populateSelectorsFromDB = function(selectors, collection, params) {
      return utils.getDataFromDB({
        "parameters": [
          {
            "param_name": "collection",
            "param_value": collection
          }
        ],
        "path": "getsaveditems"
      }, function(data) {
        data.sort(utils.compare);
        return utils.fillselectors(data, selectors, params);
      });
    };
    addNewBoxToBuilding = function(box_name_id, building_id) {
      return saveNewBox(box_name_id, function(box) {
        return utils.postToServer('update', {
          "collection": 'buildings',
          "_id": selectedbuilding_id,
          "data": {
            'boxes': box._id
          },
          "update_type": "push"
        }, function() {
          triggerClickEventOnBuildingsListElement(selectedbuilding_id);
          return saveChangeLog($("#addnewbuildingsboxselector option:selected").text(), "Додано", "");
        });
      });
    };
    deleteBuildingsBox = function(box_id, building_id) {
      utils.postToServer('update', {
        "collection": 'buildings',
        "_id": building_id,
        "data": {
          'boxes': box_id
        },
        "update_type": "pull"
      }, function() {
        triggerClickEventOnBuildingsListElement(building_id);
        return saveChangeLog($("#addnewbuildingsboxselector option:selected").text(), "Видалено", "");
      });
      return utils.postToServer('deleteboxequipment', {
        "box_id": box_id
      }, function() {
        return utils.postToServer('deleteitem', {
          "collection": 'equipment',
          "_id": box_id
        }, function() {});
      });
    };
    deleteBoxCommutator = function(box_id, comm_id) {
      utils.postToServer('deleteitem', {
        "collection": 'equipment',
        "_id": comm_id
      }, function() {});
      return utils.postToServer('update', {
        "collection": 'equipment',
        "_id": box_id,
        "data": {
          'commutators': comm_id
        },
        "update_type": "pull"
      }, function() {
        triggerClickEventOnBuildingsListElement(selectedbuilding_id);
        triggerClickEventOnBoxesListElement(box_id);
        return saveChangeLog($("#boxcommutatorlist option:selected").text(), "Видалено", " Коробка: " + $("#buildingboxeslist option:selected").text());
      });
    };
    deleteBoxUps = function(box_id, ups_id) {
      utils.postToServer('deleteitem', {
        "collection": 'equipment',
        "_id": ups_id
      }, function() {});
      return utils.postToServer('update', {
        "collection": 'equipment',
        "_id": box_id,
        "data": {
          'upses': ups_id
        },
        "update_type": "pull"
      }, function() {
        triggerClickEventOnBuildingsListElement(selectedbuilding_id);
        triggerClickEventOnBoxesListElement(box_id);
        return saveChangeLog($("#boxupseslist option:selected").text(), "Видалено", " Коробка: " + $("#buildingboxeslist option:selected").text());
      });
    };
    deleteBoxOdf = function(box_id, odf_id) {
      utils.postToServer('update', {
        "collection": 'equipment',
        "_id": getSelectedBuildingBoxId(),
        "data": {
          'odf': odf_id
        },
        "update_type": "pull"
      }, function() {
        triggerClickEventOnBuildingsListElement(selectedbuilding_id);
        triggerClickEventOnBoxesListElement(box_id);
        return saveChangeLog($("#boxodflist option:selected").text(), "Видалено", " Коробка: " + $("#buildingboxeslist option:selected").text());
      });
      return utils.postToServer('deleteitem', {
        "collection": 'equipment',
        "_id": odf_id
      }, function() {});
    };
    changeBoxType = function(value) {
      return utils.postToServer('update', {
        "collection": 'equipment',
        "_id": getSelectedBuildingBoxId(),
        "data": {
          'name': value
        },
        "update_type": "set"
      }, function() {
        return triggerClickEventOnBuildingsListElement(selectedbuilding_id);
      });
    };
    clearTextInput = function(id) {
      return $('#' + id + '').closest('div').find('input[type=text]').val("");
    };
    searchInSelector = function(selector, phrase) {
      var sub, v, value, values, _i, _len, _results;
      values = $("#connectionslist>option").map(function() {
        var data;
        data = {};
        data.value = $(this).val();
        data.text = $(this)[0].innerText;
        return data;
      });
      _results = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        v = values[_i];
        sub = v.text.substring(0, phrase.length);
        value = v.value;
        if (sub.toLowerCase() === phrase.toLowerCase()) {
          _results.push($("option[value='" + value + "']").prop('selected', true));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    changeConnectionType = function(connector_id, type, callback) {
      return utils.postToServer('update', {
        "collection": 'connectors',
        "_id": connector_id,
        "data": {
          'type': type
        },
        "update_type": "set"
      }, function() {
        return callback();
      });
    };
    changeBuildingInfo = function(data, building_id) {
      return utils.postToServer('update', {
        "_id": building_id,
        "collection": "buildings",
        "data": data,
        "update_type": "set"
      }, function() {
        return triggerClickEventOnBuildingsListElement(building_id);
      });
    };
    saveChangeLog = function(item, action, adress) {
      return utils.postToServer('saveitem', {
        "collection": "logs",
        "data": {
          "item": item.trim(),
          "action": action,
          "adress": $("#buildingslist li.active a").text() + adress,
          "date": new Date().toISOString(),
          "user": ""
        },
        "type": 'logs'
      }, function() {
        return showChangeLog();
      });
    };
    triggerClickEventOnBuildingsListElement = function(value) {
      return $("#buildingslist li a[value=" + value + "]").trigger('click');
    };
    triggerClickEventOnBoxesListElement = function(value) {
      return $("#buildingboxeslist option[value=" + value + "]").trigger('click');
    };
    populateStreetNamesSelectors = function() {
      return populateSelectorsFromDB(streetselectors, 'streetnames', ['name']);
    };
    populateCommutatorSelectors = function() {
      return populateSelectorsFromDB(commutatorSelectors, 'commutatornames', ['name']);
    };
    populateWorkerSelectors = function() {
      return populateSelectorsFromDB(workerSelectors, 'workers', ['name']);
    };
    populateBoxesSelectors = function() {
      return populateSelectorsFromDB(boxSelectors, 'boxesnames', ['name']);
    };
    populateODFSelectors = function() {
      return populateSelectorsFromDB(odfselectors, 'odfnames', ['name']);
    };
    popualteUpsesSelectors = function() {
      return populateSelectorsFromDB(upsesSelectors, 'upsnames', ['name']);
    };
    sendSelectedFileViaXMLHttpReq = function(file, path, params) {
      var formData, xmlhttpreq;
      $('div.progress').show();
      formData = new FormData();
      formData.append('file', file);
      formData.append('params', JSON.stringify(params));
      xmlhttpreq = new XMLHttpRequest();
      xmlhttpreq.open('post', path, true);
      xmlhttpreq.upload.onprogress = function(e) {
        var percentage;
        if (e.lengthComputable) {
          percentage = (e.loaded / e.total) * 100;
          return $('div.progress div.bar').css('width', percentage + '%');
        }
      };
      xmlhttpreq.onerror = function(e) {
        return showProgressInfo('An error occurred while submitting the form. Maybe your file is too big');
      };
      xmlhttpreq.onload = function() {
        return showProgressInfo(this.statusText);
      };
      xmlhttpreq.onreadystatechange = function() {
        $("#serverMessages").addClass('alert-success');
        $("#serverMessages").text("Фото збережено!");
        $("#serverMessages").show();
        return setTimeout(function() {
          return $("#serverMessages").fadeOut('slow');
        }, 3000);
      };
      xmlhttpreq.send(formData);
      return $("button.close").trigger('click');
    };
    $('#saveodfimage').bind('click', function(evt) {
      var date, foldername, params;
      foldername = $("#boxodflist option:selected").val();
      date = utils.getCurrentDateInMyFormat();
      params = {
        targetpath: foldername,
        newfilename: foldername + "/" + date + ".jpg",
        type: "odf"
      };
      evt.preventDefault();
      if ($("#odfimageform").valid() && isOptionSelected($("#boxodflist"))) {
        return sendSelectedFileViaXMLHttpReq($('#odfimage')[0].files[0], "/uploadequipmentimage", params);
      }
    });
    $('#saveboximage').bind('click', function(evt) {
      var name, params;
      name = $("#boxselector option:selected").val();
      params = {
        newfilename: name + ".jpg",
        type: "box"
      };
      evt.preventDefault();
      if ($("#boximageform").valid()) {
        return sendSelectedFileViaXMLHttpReq($('#boximage')[0].files[0], "/uploadequipmentimage", params);
      }
    });
    showProgressInfo = function(message) {
      $('div.progress').hide();
      $('strong.message').text(message);
      return $('div.alert').show();
    };
    isOptionSelected = function(selector) {
      return selector.find("option:selected").length > 0;
    };
    $("#boximageform").validate({
      rules: {
        boximage: {
          required: true
        }
      }
    });
    $("#odfimageform").validate({
      rules: {
        odfimage: {
          required: true
        }
      }
    });
    $("#freeportsform").validate({
      rules: {
        freeportsfield: {
          required: true,
          digits: true
        }
      }
    });
    $("#workerform").validate({
      rules: {
        newworkernamefield: {
          required: true
        }
      }
    });
    $("#streetrenameform").validate({
      rules: {
        renamefield: {
          required: true
        }
      }
    });
    $("#newstreetnameform").validate({
      rules: {
        newstreetnamefield: {
          required: true
        }
      }
    });
    $("#buildingnumberform").validate({
      rules: {
        streetnumber: {
          required: true
        }
      }
    });
    $("#newcomform").validate({
      rules: {
        newcomname: {
          required: true
        }
      }
    });
    $("#newboxnameform").validate({
      rules: {
        newboxname: {
          required: true
        }
      }
    });
    $("#newupsnameform").validate({
      rules: {
        newupsname: {
          required: true
        }
      }
    });
    $("#newodfnameform").validate({
      rules: {
        newodfname: {
          required: true
        }
      }
    });
    populateStreetNamesSelectors();
    getDataForBuildingsList();
    populateConnectionsList();
    populateCommutatorSelectors();
    populateWorkerSelectors();
    popualteUpsesSelectors();
    populateBoxesSelectors();
    populateODFSelectors();
    return assignEventsListeners();
  });

}).call(this);
