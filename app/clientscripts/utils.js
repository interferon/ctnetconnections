// Generated by CoffeeScript 1.6.2
(function() {
  var serverCommunicator;

  window.utils = {};

  serverCommunicator = null;

  utils.setServerCommunicator = function(sc) {
    return serverCommunicator = sc;
  };

  utils.populateComboBox = function(combobox, data) {
    var i, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      i = data[_i];
      _results.push(combobox.append("<option value=" + i._id + ">" + i.name + "</option>"));
    }
    return _results;
  };

  utils.randomGenerator = function(max_number) {
    var random;

    random = Math.random() * max_number;
    return Math.floor(random);
  };

  utils.createTable = function(data) {
    var $table, convertStringArrayToTableRow, renderCell, row, _i, _len, _ref;

    convertStringArrayToTableRow = function(string_array, type) {
      var str, tablecell, tablerow, _i, _len;

      tablerow = $('<tr>');
      for (_i = 0, _len = string_array.length; _i < _len; _i++) {
        str = string_array[_i];
        tablecell = renderCell(str, type);
        tablerow.append(tablecell);
      }
      return tablerow;
    };
    renderCell = function(str, type) {
      var close_elem, open_elem;

      open_elem = '';
      close_elem = '';
      switch (type) {
        case 'values':
          open_elem = '<td style="word-wrap: break-word">';
          close_elem = '</td>';
          break;
        case 'headers':
          open_elem = '<th style="word-wrap: break-word">';
          close_elem = '</th>';
      }
      return open_elem + str + close_elem;
    };
    $table = $('<table id="dataTable" class="'.concat(data.style).concat('">'));
    $table.attr('border', '1');
    $table.append($("<caption id='title'><b style='font-size:20px'>" + data.title + "</b></caption>"));
    $table.append(convertStringArrayToTableRow(data.headers, 'headers'));
    _ref = data.values;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      $table.append(convertStringArrayToTableRow(row, 'values'));
    }
    return $table;
  };

  utils.getSelectedDate = function(data, hours, mins) {
    var day, month, selectedDate, year;

    selectedDate = data.split("-");
    year = selectedDate[0];
    month = selectedDate[1] - 1;
    day = selectedDate[2];
    return new Date(year, month, day, hours, mins).toISOString();
  };

  utils.getButtonGroupSelection = function(group_name) {
    var status;

    status = false;
    if ($("input:radio[name=" + group_name + "]:checked").val() === "yes") {
      status = true;
    }
    return status;
  };

  utils.postToServer = function(path, item, fn) {
    return serverCommunicator.createRequest("POST", path, JSON.stringify(item), function(result) {
      $("#serverMessages").addClass('alert-success');
      $("#serverMessages").text(result.result);
      $("#serverMessages").show();
      setTimeout(function() {
        return $("#serverMessages").fadeOut('slow', function() {
          return $("#serverMessages").removeClass('alert-success');
        });
      }, 3000);
      return fn(result.object);
    });
  };

  utils.getDataFromDB = function(data, fn) {
    var p, parametersString, _i, _len, _ref;

    parametersString = "";
    _ref = data.parameters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      parametersString += p.param_name + "=" + p.param_value + "&";
    }
    parametersString = parametersString.substring(0, parametersString.length - 1);
    return serverCommunicator.createRequest('GET', data.path + "?" + parametersString, null, function(data) {
      return fn(data);
    });
  };

  utils.getUserSelectedDatesInterval = function(from, till) {
    var date, end, start;

    start = from.val();
    end = till.val();
    date = {
      start: utils.getSelectedDate(start, 3, 0),
      end: utils.getSelectedDate(end, 26, 59)
    };
    return date;
  };

  utils.formatDateForTable = function(dateInputField) {
    var day, month, selectedDate, year;

    selectedDate = dateInputField.val().split("-");
    year = selectedDate[0];
    month = selectedDate[1];
    day = selectedDate[2];
    return day + "." + month + "." + year;
  };

  utils.getCurrentDate = function() {
    return new Date();
  };

  utils.getCurrentDateInMyFormat = function() {
    var date, newdate;

    date = new Date().toISOString().substring(0, 10).split("-");
    newdate = date[2] + "-" + date[1] + "-" + date[0];
    return newdate;
  };

  utils.compareBuildings = function(a, b) {
    var result;

    result = 0;
    if (a.street < b.street) {
      result = -1;
    }
    if (a.street > b.street) {
      result = 1;
    }
    return result;
  };

  utils.compareConnections = function(a, b) {
    var result;

    result = 0;
    if (a.parent.street < b.parent.street) {
      result = -1;
    }
    if (a.parent.street > b.parent.street) {
      result = 1;
    }
    return result;
  };

  utils.compare = function(a, b) {
    var result;

    result = 0;
    if (a.name < b.name) {
      result = -1;
    }
    if (a.name > b.name) {
      result = 1;
    }
    return result;
  };

  utils.compareNumbers = function(a, b) {
    var result;

    result = 0;
    if (a.number < b.number) {
      result = -1;
    }
    if (a.number > b.number) {
      result = 1;
    }
    return result;
  };

  utils.fillselectors = function(objects_array, selectors, params) {
    var generateMiddlePart, object, selector, tagContent, tagEnd, tagStart, _i, _j, _len, _len1, _results;

    generateMiddlePart = function(params, object) {
      var content, param, _i, _len;

      content = '';
      for (_i = 0, _len = params.length; _i < _len; _i++) {
        param = params[_i];
        content += object[param] + " ";
      }
      return content;
    };
    _results = [];
    for (_i = 0, _len = selectors.length; _i < _len; _i++) {
      selector = selectors[_i];
      selector.empty();
      for (_j = 0, _len1 = objects_array.length; _j < _len1; _j++) {
        object = objects_array[_j];
        tagStart = '<option value=' + object._id + '>';
        tagContent = generateMiddlePart(params, object);
        tagEnd = '</option>';
        selector.append(tagStart + tagContent + tagEnd);
      }
      _results.push(selector.trigger('click'));
    }
    return _results;
  };

  utils.displayIfInvisible = function(elem) {
    if (!elem.is(":visible")) {
      return elem.show();
    } else {
      return elem.hide();
    }
  };

  utils.getFilesList = function(params, fn) {
    return serverCommunicator.createRequest('GET', params.path + "?foldername=" + params.value, null, function(data) {
      return fn(data);
    });
  };

  utils.sendGetRequest = function(path, fn) {
    return serverCommunicator.createRequest('GET', path, null, function(result) {
      $("#serverMessages").text(result.message);
      $("#serverMessages").show();
      setTimeout(function() {
        return $("#serverMessages").fadeOut('slow', function() {});
      }, 3000);
      return fn();
    });
  };

  utils.createTableWithActiveElements = function(data, fn, parameters) {
    var $table, convertStringArrayToTableHeaders, convertStringArrayToTableRow, renderCell, row, _i, _len, _ref;

    convertStringArrayToTableRow = function(string_array, id, type) {
      var boxquantity, button, del, lastcell, patchcordquantity, patchpanelquantity, pigtailsquantity, plan, quantityfield, socketsquantity, str, tablecell, tablerow, value, _i, _len;

      tablerow = $("<tr  value='" + id + "'>");
      for (_i = 0, _len = string_array.length; _i < _len; _i++) {
        str = string_array[_i];
        tablecell = renderCell(str, type);
        tablerow.append(tablecell);
      }
      if (parameters) {
        value = parameters.selector;
        switch (value) {
          case 'copperincome':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            lastcell = $("<td>");
            lastcell.append(button);
            tablerow.append(lastcell);
            break;
          case 'opticalincome':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            lastcell = $("<td>");
            lastcell.append(button);
            tablerow.append(lastcell);
            plan = $("<td><button value='" + id + "' class='btn btn'><i value='" + id + "' class='icon-list '></i></button></td>");
            plan.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return parameters.fn(value);
            });
            tablerow.append(plan);
            break;
          case 'opticalplan':
            button = $("<button class='btn btn-danger' income_id='" + parameters.income_id + "' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            button.bind('click', function(e) {
              var income_id;

              value = e.target.getAttribute('value');
              income_id = e.target.getAttribute('income_id');
              return fn(value, income_id);
            });
            lastcell = $("<td>");
            lastcell.append(button);
            tablerow.append(lastcell);
            del = $("<td><button value='" + id + "' class='btn btn-danger'><i value='" + id + "' class='icon-trash '></i></button></td>");
            del.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return parameters.fn(value);
            });
            tablerow.append(del);
            break;
          case 'boxesstore':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            boxquantity = $("<input class='input-small' id=" + id + ">");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            quantityfield = $("<td>");
            lastcell = $("<td>");
            lastcell.append(button);
            quantityfield.append(boxquantity);
            tablerow.append(quantityfield);
            tablerow.append(lastcell);
            break;
          case 'patchpanelesstore':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            patchpanelquantity = $("<input class='input-small' id=" + id + ">");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            quantityfield = $("<td>");
            lastcell = $("<td>");
            lastcell.append(button);
            quantityfield.append(patchpanelquantity);
            tablerow.append(quantityfield);
            tablerow.append(lastcell);
            break;
          case 'patchcordesstore':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            patchcordquantity = $("<input class='input-small' id=" + id + ">");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            quantityfield = $("<td>");
            lastcell = $("<td>");
            lastcell.append(button);
            quantityfield.append(patchcordquantity);
            tablerow.append(quantityfield);
            tablerow.append(lastcell);
            break;
          case 'pigtailsesstore':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            pigtailsquantity = $("<input class='input-small' id=" + id + ">");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            quantityfield = $("<td>");
            lastcell = $("<td>");
            lastcell.append(button);
            quantityfield.append(pigtailsquantity);
            tablerow.append(quantityfield);
            tablerow.append(lastcell);
            break;
          case 'socketsesstore':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            socketsquantity = $("<input class='input-small' id=" + id + ">");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            quantityfield = $("<td>");
            lastcell = $("<td>");
            lastcell.append(button);
            quantityfield.append(socketsquantity);
            tablerow.append(quantityfield);
            tablerow.append(lastcell);
            break;
          case 'workerscash':
            button = $("<button class='btn btn-danger' value='" + id + "'><i value='" + id + "' class='icon-edit '><i/></button>");
            button.bind('click', function(e) {
              value = e.target.getAttribute('value');
              return fn(value);
            });
            lastcell = $("<td>");
            lastcell.append(button);
            tablerow.append(lastcell);
        }
      }
      return tablerow;
    };
    convertStringArrayToTableHeaders = function(string_array) {
      var str, tablecell, tablerow, _i, _len;

      tablerow = $('<tr>');
      for (_i = 0, _len = string_array.length; _i < _len; _i++) {
        str = string_array[_i];
        tablecell = renderCell(str, 'headers');
        tablerow.append(tablecell);
      }
      return tablerow;
    };
    renderCell = function(str, type) {
      var close_elem, open_elem;

      open_elem = '';
      close_elem = '';
      switch (type) {
        case 'values':
          open_elem = '<td style="word-wrap: break-word">';
          close_elem = '</td>';
          break;
        case 'headers':
          open_elem = '<th style="word-wrap: break-word">';
          close_elem = '</th>';
      }
      return open_elem + str + close_elem;
    };
    $table = $('<table id="dataTable" class="'.concat(data.style).concat('">'));
    $table.attr('border', '1');
    $table.append($("<caption id='title'><b style='font-size:20px'>" + data.title + "</b></caption>"));
    $table.append(convertStringArrayToTableHeaders(data.headers));
    _ref = data.values;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      $table.append(convertStringArrayToTableRow(row.rowdata, row.id, 'values'));
    }
    return $table;
  };

  utils.saveImageToServer = function(file, path, serverCallback) {
    var formData, showProgressInfo, xmlhttpreq;

    showProgressInfo = function(message) {
      $('div.progress').hide();
      $('strong.message').text(message);
      return $('div.alert').show();
    };
    $('div.progress').show();
    formData = new FormData();
    formData.append('file', file);
    xmlhttpreq = new XMLHttpRequest();
    xmlhttpreq.open('post', path, true);
    xmlhttpreq.upload.onprogress = function(e) {
      var percentage;

      if (e.lengthComputable) {
        percentage = (e.loaded / e.total) * 100;
        return $('div.progress div.bar').css('width', percentage + '%');
      }
    };
    xmlhttpreq.onerror = function(e) {
      return showProgressInfo('Під час завантаження сталася помилка!');
    };
    xmlhttpreq.onload = function() {
      return showProgressInfo(this.statusText);
    };
    xmlhttpreq.onreadystatechange = function() {
      var image;

      if (xmlhttpreq.readyState === 4) {
        if (xmlhttpreq.status === 200) {
          image = xmlhttpreq.responseText;
          return serverCallback(image);
        }
      }
    };
    return xmlhttpreq.send(formData);
  };

}).call(this);
