// Generated by CoffeeScript 1.7.1
(function() {
  $(document).ready(function() {
    var assignEvents, calculateAndshowResults, calculatePayments, consts, finance, formulas, initUI, opticalpayments, ui;
    consts = {
      unpaidCable: 60,
      regularlyPaidCable: 60,
      limitCable: 120,
      pricePerMeter: 5,
      pricePerMeterAsWork: 4,
      work: 150,
      promowork: 100,
      promo: 250
    };
    opticalpayments = {
      commutator: 81,
      mediaconverter: 54,
      no: 0
    };
    finance = {
      getUSDAdjust: function(cb) {
        return $.get("/usdadjust", function(json) {
          return cb(+json.adjust);
        });
      },
      used_providers: 0,
      providers_url: {
        'yahoo': "http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json",
        'rate_exchange': "http://rate-exchange.appspot.com/currency?from=USD&to=UAH"
      },
      current_rate: null,
      getUAHEchangeRate: function(provider, url, adjust, cb) {
        if (finance.used_providers < 2) {
          return $.ajax({
            url: url,
            dataType: 'jsonp',
            success: function(json) {
              var uahrate;
              uahrate = finance.extractUAHRate[provider](json);
              console.log(uahrate);
              finance.current_rate = uahrate + adjust;
              ui.setCurrentRate(finance.current_rate.toFixed(2));
              finance.used_providers++;
              return cb();
            },
            error: function() {
              return finance.getUAHEchangeRate('rate_exchange', finance.providers_url.rate_exchange, adjust);
            }
          });
        }
      },
      extractUAHRate: {
        yahoo: function(rates) {
          var price, rate, symbol, uahrate, _i, _len, _ref;
          _ref = rates.list.resources;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rate = _ref[_i];
            price = rate.resource.fields.price;
            symbol = rate.resource.fields.symbol;
            if (symbol === "UAH=X") {
              uahrate = +price;
            }
          }
          return +uahrate;
        },
        rate_exchange: function(rate) {
          return rate.rate;
        }
      }
    };
    ui = {
      setCurrentRate: function(rate) {
        return $("#current_rate").text(rate);
      },
      getprepaid: function() {
        var _ref;
        return (_ref = $("input[name='promo']:checked").attr('value') === "yes") != null ? _ref : {
          "true": false
        };
      },
      getcablelength: function() {
        return +$("#cablelength").val();
      },
      getuserplan: function() {
        return +$("#userplan").val();
      },
      getuserplanduration: function() {
        return +$("#userplanduration").val();
      },
      getopticaltype: function() {
        return $("input[name='opticalequipment']:checked").attr('value');
      },
      getoncashstatus: function() {
        var _ref;
        return (_ref = $("input[name='oncash']:checked").attr('value') === "yes") != null ? _ref : {
          "true": false
        };
      },
      setuserbill: function(value) {
        return $("#userbill").text(value);
      },
      setworkcost: function(value) {
        return $("#work").text(value);
      },
      settotalcost: function(value) {
        return $("#total").text(value);
      },
      setlabelstext: function(text) {
        $("#userbill").text(text.userbill);
        $("#work").text(text.work);
        return $("#total").text(text.total);
      },
      oncashblockhide: function() {
        return $("#oncashblock").hide();
      },
      oncashblockshow: function() {
        return $("#oncashblock").show();
      },
      promoblockhide: function() {
        return $("#promoblock").hide();
      },
      promoblockshow: function() {
        return $("#promoblock").show();
      },
      showuserplanwarning: function() {
        $("#warninglabel").text("Заповніть поле!");
        return $("#userplan").addClass('error');
      },
      hideuserplanwarning: function() {
        return $("#warninglabel").text("");
      },
      nullifylabels: function() {
        $("#userbill").text("0");
        $("#work").text("0");
        return $("#total").text("0");
      },
      preselectRadioButtons: function() {
        $("#promoprepaidyes").trigger('click');
        $("#opticalequipmentno").trigger('click');
        return $("#oncashno").trigger('click');
      },
      preFillTextFields: function() {
        $("#cablelength").val(1);
        $("#userplan").val(0);
        return $("#userplanduration").val(0);
      }
    };
    formulas = {
      calculateShortLengthCase: function(prepaid, planbill, opticaltype) {
        var total, userbill, work;
        work = consts.work;
        userbill = 0;
        if (prepaid) {
          userbill = +consts.promo;
          work = consts.promowork;
        }
        work += opticalpayments[opticaltype] * finance.current_rate;
        total = work + userbill;
        if (planbill > 0) {
          total += planbill;
          userbill += planbill;
        }
        return {
          work: work.toFixed(0),
          userbill: userbill.toFixed(0),
          total: total.toFixed(0)
        };
      },
      calculateMeduimLengthCase: function(cablelength, prepaid, planbill, opticaltype) {
        var cableToCount, total, userbill, work;
        cableToCount = cablelength - consts.unpaidCable;
        work = cableToCount * consts.pricePerMeter;
        userbill = 0;
        if (prepaid) {
          userbill = +consts.promo;
          work += consts.promowork;
        } else {
          work += consts.work;
        }
        work += opticalpayments[opticaltype] * finance.current_rate;
        total = work + userbill;
        if (planbill > 0) {
          total = total + planbill;
          userbill += planbill;
        }
        return {
          work: work.toFixed(0),
          userbill: userbill.toFixed(0),
          total: total.toFixed(0)
        };
      },
      calculateLongLengthCase: function(cablelength, userplan, userplanduration, oncash, opticaltype) {
        var overpay, total, userbill, work;
        work = consts.regularlyPaidCable * consts.pricePerMeter + consts.promowork;
        userbill = consts.promo;
        if (oncash) {
          userbill += (cablelength - consts.limitCable) * consts.pricePerMeter;
          overpay = userbill - userplan * 12;
          if (overpay > 0) {
            work = work + overpay;
            userbill = userbill - overpay;
          }
        } else {
          work += (cablelength - consts.limitCable) * consts.pricePerMeterAsWork;
        }
        work += opticalpayments[opticaltype] * finance.current_rate;
        userbill = userbill + userplan * userplanduration;
        total = work + userbill;
        return {
          work: work.toFixed(0),
          userbill: userbill.toFixed(0),
          total: total.toFixed(0)
        };
      }
    };
    calculateAndshowResults = function() {
      var result;
      result = calculatePayments(ui.getcablelength(), ui.getprepaid(), ui.getuserplan(), ui.getuserplanduration(), ui.getoncashstatus(), ui.getopticaltype());
      ui.nullifylabels();
      return ui.setlabelstext(result);
    };
    calculatePayments = function(cablelength, prepaid, userplan, userplanduration, oncash, opticaltype) {
      var result, userbill;
      ui.oncashblockhide();
      ui.hideuserplanwarning();
      ui.promoblockshow();
      result = {};
      userbill = userplan * userplanduration;
      if (cablelength < 61) {
        result = formulas.calculateShortLengthCase(prepaid, userbill, opticaltype);
      }
      if (cablelength >= 61 && cablelength <= 120) {
        result = formulas.calculateMeduimLengthCase(cablelength, prepaid, userbill, opticaltype);
      }
      if (cablelength > 120) {
        ui.oncashblockshow();
        ui.promoblockhide();
        if (ui.getuserplan() > 0) {
          ui.hideuserplanwarning();
          result = formulas.calculateLongLengthCase(cablelength, userplan, userplanduration, oncash, opticaltype);
        } else {
          ui.showuserplanwarning();
        }
      }
      return result;
    };
    assignEvents = function() {
      $("input[type='text']").keyup(function() {
        return calculateAndshowResults();
      });
      return $("input[type='radio']").change(function() {
        return calculateAndshowResults();
      });
    };
    finance.getUSDAdjust(function(adjust) {
      return finance.getUAHEchangeRate('yahoo', finance.providers_url.yahoo, adjust, function() {
        return initUI();
      });
    });
    return initUI = function() {
      assignEvents();
      ui.oncashblockhide();
      ui.preselectRadioButtons();
      return ui.preFillTextFields();
    };
  });

}).call(this);
