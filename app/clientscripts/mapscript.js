// Generated by CoffeeScript 1.7.1
(function() {
  $(document).ready(function() {
    return window.initYandexMaps = function() {
      var assignEventsToBuildingsList, createMap, createPolylineCoordinates, displayConnections, displayInfoOnMap, getBuildingInfoById, getBuildingsCoordinates, markSelectedBuildingOnMapWithCircle;
      getBuildingsCoordinates = function(buildings, callback) {
        var c, coords, count, myGeocoder, street, _i, _len, _results;
        coords = [];
        count = 0;
        _results = [];
        for (_i = 0, _len = buildings.length; _i < _len; _i++) {
          c = buildings[_i];
          street = c.building_name.replace('є', 'е');
          myGeocoder = ymaps.geocode("Україна місто Чернівці " + street);
          _results.push(myGeocoder.then(function(res) {
            var coordinates;
            coordinates = res.geoObjects.get(0).geometry.getCoordinates();
            coords.push(coordinates);
            count++;
            if (count === buildings.length) {
              return callback(coords);
            }
          }, function(err) {}));
        }
        return _results;
      };
      createPolylineCoordinates = function(startcoordinate, endcoordinates) {
        var connectionscoordinates, coords, _i, _len;
        connectionscoordinates = [];
        for (_i = 0, _len = endcoordinates.length; _i < _len; _i++) {
          coords = endcoordinates[_i];
          connectionscoordinates.push(startcoordinate);
          connectionscoordinates.push(coords);
        }
        return connectionscoordinates;
      };
      displayConnections = function(map, startcoordinates, endcoordinates, color) {
        var myPolyline, polylinecoordinates;
        polylinecoordinates = createPolylineCoordinates(startcoordinates, endcoordinates);
        myPolyline = new ymaps.Polyline(polylinecoordinates, {
          balloonContent: ""
        }, {
          balloonHasCloseButton: false,
          strokeColor: color,
          strokeWidth: 2,
          strokeOpacity: 0.7
        });
        return map.geoObjects.add(myPolyline);
      };
      getBuildingInfoById = function(building_id, callback) {
        return utils.getDataFromDB({
          "parameters": [
            {
              "param_name": "collection",
              "param_value": "buildings"
            }, {
              "param_name": "building_id",
              "param_value": building_id
            }
          ],
          "path": "getsaveditems"
        }, function(buildinginfo) {
          return callback(buildinginfo);
        });
      };
      createMap = function() {
        $('#map').empty();
        return new ymaps.Map("map", {
          center: [26, 48],
          zoom: 5
        });
      };
      markSelectedBuildingOnMapWithCircle = function(map, diameter, coordinates, centermap, street_name) {
        var circle;
        if (centermap) {
          map.setCenter(coordinates, 17);
        }
        circle = new ymaps.Circle([coordinates, diameter], {
          content: street_name,
          balloonContent: street_name
        }, {
          geodesic: true
        });
        return map.geoObjects.add(circle);
      };
      displayInfoOnMap = function(street_name, building_id) {
        var in_line_color, map, out_line_color;
        in_line_color = "F20A0A";
        out_line_color = "1A0AC9";
        map = createMap();
        return getBuildingsCoordinates([
          {
            building_name: street_name
          }
        ], function(buildings_coords) {
          markSelectedBuildingOnMapWithCircle(map, 12, buildings_coords[0], true, street_name);
          return getBuildingInfoById(building_id, function(buildinginfo) {
            getBuildingsCoordinates(buildinginfo.connections.incoming_connections, function(connected_buildings_coords) {
              var coords, _i, _len;
              for (_i = 0, _len = connected_buildings_coords.length; _i < _len; _i++) {
                coords = connected_buildings_coords[_i];
                markSelectedBuildingOnMapWithCircle(map, 7, coords, false, "");
              }
              return displayConnections(map, buildings_coords[0], connected_buildings_coords, in_line_color);
            });
            return getBuildingsCoordinates(buildinginfo.connections.outgoing_connections, function(connected_buildings_coords) {
              var coords, _i, _len;
              for (_i = 0, _len = connected_buildings_coords.length; _i < _len; _i++) {
                coords = connected_buildings_coords[_i];
                markSelectedBuildingOnMapWithCircle(map, 7, coords, false, "");
              }
              return displayConnections(map, buildings_coords[0], connected_buildings_coords, out_line_color);
            });
          });
        });
      };
      assignEventsToBuildingsList = function() {
        return $("#buildingslist li a").bind('click', function(e) {
          var building_id, buildings_street_name;
          buildings_street_name = e.target.innerText;
          building_id = e.target.attributes.value.nodeValue;
          return displayInfoOnMap(buildings_street_name, building_id);
        });
      };
      assignEventsToBuildingsList();
      return $("#buildingslist li:nth-child(2) a").trigger('click');
    };
  });

}).call(this);
